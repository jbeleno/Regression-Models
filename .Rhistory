function1()
library(UsingR)
data(diamond)
library(ggplot2)
fit <- lm(price ~ carat, data = diamond)
coef(fit)
fit2 <- lm(price ~ I(carat - mean(carat)), data = diamond)
coef(fit2)
fit3 <- lm(price ~ I(carat * 10), data = diamond)
coef(fit3)
residualsInXLine <- function(){}
library(UsingR)
data(diamond)
library(ggplot2)
diamond$e <- resid(lm(price ~ carat, data = diamond))
g = ggplot(diamond, aes(x = carat, y = e))
g = g + xlab("Mass (carats)")
g = g + ylab("Residual price (SIN $)")
g = g + geom_hline(yintercept = 0, size = 2)
g = g + geom_point(size = 7, colour = "black", alpha=0.5)
g = g + geom_point(size = 5, colour = "blue", alpha=0.2)
g
e = c(resid(lm(price ~ 1, data = diamond)),
resid(lm(price ~ carat, data = diamond)))
fit = factor(c(rep("Itc", nrow(diamond)),
rep("Itc, slope", nrow(diamond))))
g = ggplot(data.frame(e = e, fit = fit), aes(y = e, x = fit, fill = fit))
g = g + geom_dotplot(binaxis = "y", size = 2, stackdir = "center", binwidth = 20)
g = g + xlab("Fitting approach")
g = g + ylab("Residual price")
g
e = c(resid(lm(price ~ 1, data = diamond)),
resid(lm(price ~ carat, data = diamond)))
fit = factor(c(rep("Itc", nrow(diamond)),
rep("Itc, slope", nrow(diamond))))
g = ggplot(data.frame(e = e, fit = fit), aes(y = e, x = fit, fill = fit))
g = g + geom_dotplot(binaxis = "y", stackdir = "center", binwidth = 20)
g = g + xlab("Fitting approach")
g = g + ylab("Residual price")
g
x <- c(0.61, 0.93, 0.83, 0.35, 0.54, 0.16, 0.91, 0.62, 0.62)
y <- c(0.67, 0.84, 0.6, 0.18, 0.85, 0.47, 1.1, 0.65, 0.36)
fit <- lm(y ~ x)
fit
summary(fit)
data("mtcars")
data("mtcars")
fit <- lm(mpg ~ wt, data = mtcars)
x <- c(mean(mtcars$wt))
predict(fit, newdata = data.frame(wt = x))
predict(fit, newdata = data.frame(wt = x), interval = ("confidence"))
mtcars$hp
summary(mtcars)
mtcars -help
mtcars -h
summary(fit)
x
x <- c(3)
predict(fit, newdata = data.frame(wt = x), interval = ("prediction"))
data("mtcars")
fit <- lm(mpg ~ I(wt/2), data = mtcars)
summary(fit)$coefficients
sumCoeff <- summary(fit)$coefficients
sumCoef[1,1] + c(-1, 1) * qt(.975, df = fit$df) * sumCoef[1, 2]
sumCoef <- summary(fit)$coefficients
sumCoef[1,1] + c(-1, 1) * qt(.975, df = fit$df) * sumCoef[1, 2]
sumCoef[2,1] + c(-1, 1) * qt(.975, df = fit$df) * sumCoef[2, 2]
fit <- lm(mpg ~ wt, data = mtcars)
coef(fit)
fit
summary(fit)
source("multivariable2.R")
info()
quickCorrelations()
install.packages(GGally)
install.packages("GGally")
quickCorrelations()
help("wrap", package = "GGally")
source("multivariable2.R")
quickCorrelations()
summary(lm(Fertility ~ . , data = swiss))$coefficients
n <- 100; x2 <- 1 : n; x1 <- .01 * x2 + runif(n, -.1, .1); y = -x1 + x2 + rnorm(n, sd = .01)
summary(lm(y ~ x1))$coef
n <- 100; x2 <- 1 : n; x1 <- .01 * x2 + runif(n, -.1, .1); y = -x1 + x2 + rnorm(n, sd = .01)
summary(lm(y ~ .))$coef
source("multivariable2.R")
plotExample1(y, x1, x2)
source("multivariable2.R")
plotResidualsExample1(x2, ey, ex1)
source("multivariable2.R")
plotResidualsExample1(dat)
dat = data.frame(y = y, x1 = x1, x2 = x2, ey = resid(lm(y ~ x2)), ex1 = resid(lm(x1 ~ x2)))
plotResidualsExample1(dat)
source("multivariable2.R")
unnecesaryVariables()
source("multivariable2.R")
plotExample2()
summary(lm(count ~ spray, data = InsectSprays))$coef
summary(lm(count ~ spray - 1, data = InsectSprays))$coef
library(dplyr)
summarise(group_by(InsectSprays, spray), mn = mean(count))
source("multivariable3.R")
swiss = mutate(swiss, CatholicBin = 1 * (Catholic > 50))
plotBinaryData(swiss)
fit = lm(Fertility ~ Agriculture + factor(CatholicBin), data = swiss)
g1 = g
g1 = g1 + geom_abline(intercept = coef(fit)[1], slope = coef(fit)[2], size = 2)
g1 = g1 + geom_abline(intercept = coef(fit)[1] + coef(fit)[3], slope = coef(fit)[2], size = 2)
g1
g1 = g
g1 = g1 + geom_abline(intercept = coef(fit)[1], slope = coef(fit)[2], size = 2)
g1
g = ggplot(swiss, aes(x = Agriculture, y = Fertility, colour = factor(CatholicBin)))
g = g + geom_point(size = 6, colour = "black") + geom_point(size = 4)
g = g + xlab("% in Agriculture") + ylab("Fertility")
g
g1 = g
g1 = g1 + geom_abline(intercept = coef(fit)[1], slope = coef(fit)[2], size = 2)
g1
fit = lm(Fertility ~ Agriculture + factor(CatholicBin), data = swiss)
g1 = g
g1 = g1 + geom_abline(intercept = coef(fit)[1], slope = coef(fit)[2], size = 2)
g1 = g1 + geom_abline(intercept = coef(fit)[1] + coef(fit)[3], slope = coef(fit)[2], size = 2)
g1
summary(lm(Fertility ~ Agriculture + factor(CatholicBin), data = swiss))$coef
summary(lm(Fertility ~ Agriculture * factor(CatholicBin), data = swiss))$coef
fit = lm(Fertility ~ Agriculture * factor(CatholicBin), data = swiss)
g1 = g
g1 = g1 + geom_abline(intercept = coef(fit)[1], slope = coef(fit)[2], size = 2)
g1 = g1 + geom_abline(intercept = coef(fit)[1] + coef(fit)[3],
slope = coef(fit)[2] + coef(fit)[4], size = 2)
g1
summary(lm(Fertility ~ Agriculture + Agriculture : factor(CatholicBin), data = swiss))$coef
library(rgl)
install.packages("rgl")
library(rgl)
install.packages("rgl")
library(rgl)
library(rgl)
install.packages("rgl")
library(rgl)
system.file("libs/aglrgl.so", package="rgl")
unlink(system.file("libs/aglrgl.so", package="rgl"))
library(rgl)
system.file("libs/rgl.so", package="rgl")
unlink(system.file("libs/rgl.so", package="rgl"))
library(rgl)
install.packages("rgl")
library(rgl)
source("resideuals_multivariable.R")
source("residuals_multivariable.R")
linearModel()
source("residuals_multivariable.R")
leverageAndInfluence()
source("residuals_multivariable.R")
leverageAndInfluence()
?influence.measures
source("residuals_multivariable.R")
case1()
source("residuals_multivariable.R")
case1()
n <- 100
x <- c(10, rnorm(n))
y <- c(10, c(rnorm(n)))
fit <- lm(y ~ x)
round(dfbetas(fit)[1 : 10, 2], 3)
round(hatvalues(fit)[1 : 10], 3)
source("residuals_multivariable.R")
case2()
n <- 100
x <- rnorm(n)
y <- x + rnorm(n, sd = .3)
x <- c(5, x)
y <- c(5, y)
fit2 <- lm(y ~ x)
round(dfbetas(fit2)[1 : 10, 2], 3)
n <- 100
x <- rnorm(n)
y <- x + rnorm(n, sd = .3)
x <- c(5, x)
y <- c(5, y)
fit2 <- lm(y ~ x)
round(dfbetas(fit2)[1 : 10, 2], 3)
n <- 100
x <- rnorm(n)
y <- x + rnorm(n, sd = .3)
x <- c(5, x)
y <- c(5, y)
fit2 <- lm(y ~ x)
round(dfbetas(fit2)[1 : 10, 2], 3)
round(hatvalues(fit2)[1 : 10], 3)
source("residuals_multivariable.R")
finalExample()
dat <- read.table('http://www4.stat.ncsu.edu/~stefanski/NSF_Supported/Hidden_Images/orly_owl_files/orly_owl_Lin_4p_5_flat.txt', header = FALSE)
pairs(dat)
summary(lm(V1 ~ . -1, data = dat))$coef
fit <- lm(V1 ~ . - 1, data = dat)
plot(predict(fit), resid(fit), pch = '.')
source("model_selection.R")
nonDependenciesSD()
source("model_selection.R")
DependenciesDS()
source("model_selection.R")
varianceVFI()
install.packages(car)
install.packages("car")
varianceVFI()
install.packages("car")
source("model_selection.R")
nestedModel()
source("model_selection.R")
nestedModel()
source("model_selection.R")
nestedModel()
source("model_selection.R")
nestedModel()
fit1 <- lm(Fertility ~ Agriculture, data = swiss)
fit3 <- update(fit1, Fertility ~ Agriculture + Examination + Education)
fit5 <- update(fit3, Fertility ~ Agriculture + Examination + Education + Catholic + Infant.Mortality)
anova(fit1, fit3, fit5)
fit <- lm(Fertility ~ . , data = swiss)
fit1 <- lm(Fertility ~ Agriculture, data = swiss)
fit3 <- update(fit, Fertility ~ Agriculture + Examination + Education)
fit5 <- update(fit, Fertility ~ Agriculture + Examination + Education + Catholic + Infant.Mortality)
anova(fit1, fit3, fit5)
data("mtcars")
fit <- lm(mpg ~ cyl + wt, data = mtcars)
predict(fit, 8)
?mtcars
summary(fit)
fit$coefficients[2][1]
fit$coefficients[2][1]*2
summary(mtcars)
str(mtcars)
fit <- lm(mpg ~ I(factor(cyl)) + wt, data = mtcars)
fit$coefficients
summary(fit)
source("quiz3.R")
question1()
fit2 <- lm(mpg ~ I(factor(cyl)), data = mtcars)
fit2$coefficients[3]
summary(fit)
summary(fit2)
fit <- lm(mpg ~ I(factor(cyl)) * wt, data = mtcars)
summary(fit)
fit1 <- lm(mpg ~ I(factor(cyl)) + wt, data = mtcars)
fit2 <- lm(mpg ~ I(factor(cyl)) * wt, data = mtcars)
anova(fit1, fit2)
source("quiz3.R")
source("quiz3.R")
question3()
fit <- lm(mpg ~ I(wt * 0.5) + factor(cyl), data = mtcars)
summary(fit)
fit <- lm(mpg ~ I(factor(cyl)) + wt, data = mtcars)
summary(fit)
?mtcars
x <- c(0.586, 0.166, -0.042, -0.614, 11.72)
y <- c(0.549, -0.026, -0.127, -0.751, 1.344)
x <- c(0.586, 0.166, -0.042, -0.614, 11.72)
y <- c(0.549, -0.026, -0.127, -0.751, 1.344)
fit <- lm(y ~ x)
round(hatvalues(fit)[1 : 10], 3)
x <- c(0.586, 0.166, -0.042, -0.614, 11.72)
y <- c(0.549, -0.026, -0.127, -0.751, 1.344)
fit <- lm(y ~ x)
round(hatvalues(fit)[1 : 5], 3)
x <- c(0.586, 0.166, -0.042, -0.614, 11.72)
y <- c(0.549, -0.026, -0.127, -0.751, 1.344)
fit <- lm(y ~ x)
# First look for high hatvalue
round(hatvalues(fit)[1 : 5], 4)
round(dfbetas(fit)[1 : 5, 2], 3)
source("logistic_regression.R")
example1()
source("logistic_regression.R")
example1()
source("logistic_regression.R")
example1()
source("logistic_regression.R")
logistic_regression_ravens()
source("logistic_regression.R")
logistic_regression_ravens()
source("logistic_regression.R")
logistic_regression_ravens()
source("logistic_regression.R")
logistic_regression_ravens()
source("logistic_regression.R")
logistic_regression_ravens()
download.file("https://dl.dropboxusercontent.com/u/7710864/data/gaData.rda",destfile="./data/gaData.rda",method="curl")
load("./data/gaData.rda")
gaData$julian <- julian(gaData$date)
head(gaData)
plot(gaData$julian,gaData$visits,pch=19,col="darkgrey",xlab="Julian",ylab="Visits")
plot(gaData$julian,gaData$visits,pch=19,col="darkgrey",xlab="Julian",ylab="Visits")
lm1 <- lm(gaData$visits ~ gaData$julian)
abline(lm1,col="red",lwd=3)
round(exp(coef(lm(I(log(gaData$visits + 1)) ~ gaData$julian))), 5)
plot(gaData$julian,gaData$visits,pch=19,col="darkgrey",xlab="Julian",ylab="Visits")
glm1 <- glm(gaData$visits ~ gaData$julian,family="poisson")
abline(lm1,col="red",lwd=3); lines(gaData$julian,glm1$fitted,col="blue",lwd=3)
plot(glm1$fitted,glm1$residuals,pch=19,col="grey",ylab="Residuals",xlab="Fitted")
library(sandwich)
install.packages("sandwich")
confint(glm1)
confint.agnostic(glm1)
library(sandwich)
confint(glm1)
confint.agnostic(glm1)
plot(glm1$fitted,glm1$residuals,pch=19,col="grey",ylab="Residuals",xlab="Fitted")
round(exp(coef(lm(I(log(gaData$visits + 1)) ~ gaData$julian))), 5)
glm2 <- glm(gaData$simplystats ~ julian(gaData$date),offset=log(visits+1),
family="poisson",data=gaData)
plot(julian(gaData$date),glm2$fitted,col="blue",pch=19,xlab="Date",ylab="Fitted Counts")
points(julian(gaData$date),glm1$fitted,col="red",pch=19)
glm2 <- glm(gaData$simplystats ~ julian(gaData$date),offset=log(visits+1),
family="poisson",data=gaData)
plot(julian(gaData$date),gaData$simplystats/(gaData$visits+1),col="grey",xlab="Date",
ylab="Fitted Rates",pch=19)
lines(julian(gaData$date),glm2$fitted/(gaData$visits+1),col="blue",lwd=3)
glm2 <- glm(gaData$simplystats ~ julian(gaData$date),offset=log(visits+1),
family="poisson",data=gaData)
plot(julian(gaData$date),gaData$simplystats/(gaData$visits+1),col="grey",xlab="Date",
ylab="Fitted Rates",pch=19)
lines(julian(gaData$date),glm2$fitted/(gaData$visits+1),col="blue",lwd=3)
glm2 <- glm(gaData$simplystats ~ julian(gaData$date),offset=log(visits+1),
family="poisson",data=gaData)
plot(julian(gaData$date),glm2$fitted,col="blue",pch=19,xlab="Date",ylab="Fitted Counts")
points(julian(gaData$date),glm1$fitted,col="red",pch=19)
glm2 <- glm(gaData$simplystats ~ julian(gaData$date),offset=log(visits+1),
family="poisson",data=gaData)
plot(julian(gaData$date),gaData$simplystats/(gaData$visits+1),col="grey",xlab="Date",
ylab="Fitted Rates",pch=19)
lines(julian(gaData$date),glm2$fitted/(gaData$visits+1),col="blue",lwd=3)
n <- 500; x <- seq(0, 4 * pi, length = n); y <- sin(x) + rnorm(n, sd = .3)
knots <- seq(0, 8 * pi, length = 20);
splineTerms <- sapply(knots, function(knot) (x > knot) * (x - knot))
xMat <- cbind(1, x, splineTerms)
yhat <- predict(lm(y ~ xMat - 1))
plot(x, y, frame = FALSE, pch = 21, bg = "lightblue", cex = 2)
lines(x, yhat, col = "red", lwd = 2)
splineTerms <- sapply(knots, function(knot) (x > knot) * (x - knot)^2)
xMat <- cbind(1, x, x^2, splineTerms)
yhat <- predict(lm(y ~ xMat - 1))
plot(x, y, frame = FALSE, pch = 21, bg = "lightblue", cex = 2)
lines(x, yhat, col = "red", lwd = 2)
# Chord finder, playing the white keys on a piano from octave c4 - c5
notes4 <- c(261.63, 293.66, 329.63, 349.23, 392.00, 440.00, 493.88, 523.25)
# 2 seconds of data
t <- seq(0, 2, by = .001); n <- length(t)
# Package savewav get real data from sound
# but I'm simulating it
c4 <- sin(2 * pi * notes4[1] * t)
e4 <- sin(2 * pi * notes4[3] * t)
g4 <- sin(2 * pi * notes4[5] * t)
# Create a chord based on 3 notes
chord <- c4 + e4 + g4 + rnorm(n, 0, 0.3)
# I get all the functions of notes
x <- sapply(notes4, function(freq) sin(2 * pi * freq * t))
# And check the results of applying a linear regression
fit <- lm(chord ~ x - 1)
# Plot the results
plot(c(0, 9), c(0, 1.5), xlab = "Note", ylab = "Coef^2", axes = FALSE, frame = TRUE, type = "n")
axis(2)
axis(1, at = 1 : 8, labels = c("c4", "d4", "e4", "f4", "g4", "a4", "b4", "c5"))
for (i in 1 : 8) abline(v = i, lwd = 3, col = grey(.8))
lines(c(0, 1 : 8, 9), c(0, coef(fit)^2, 0), type = "l", lwd = 3, col = "red")
##(How you would really do it)
a <- fft(chord); plot(Re(a)^2, type = "l")
?𝚜𝚑𝚞𝚝𝚝𝚕𝚎
?shuttle
library(MASS)
?shuttle
str(shuttle)
logReg <- glm(shuttle$use ~ shuttle$wind,
family="binomial")
summary(logReg)
exp(logRegRavens$coeff)
exp(logReg$coeff)
x <- -5:5
y <- c(5.12, 3.93, 2.67, 1.87, 0.52, 0.08, 0.93, 2.05, 2.54, 3.87, 4.97)
plot(x, y)
summary(cars)
summary(mtcars)
?mtcars
str(mtcars)
fit <- lm(mpg ~ .)
fit <- lm(mpg ~ ., data = mtcars)
plot(fit)
?mtcars
head(mtcars)
mtcars <- mutate(mtcars, cyl = factor(cyl), am = factor(am))
library(dplyr)
mtcars <- mutate(mtcars, cyl = factor(cyl), am = factor(am))
require(GGally)
my_fn <- function(data, mapping, method="loess", ...){
p <- ggplot(data = data, mapping = mapping) +
geom_point() +
geom_smooth(method=method, ...)
p
}
g = ggpairs(mtcars, lower = list(continuous = wrap(my_fn, method="lm")))
g
require(ggplot2)
g = ggpairs(mtcars, lower = list(continuous = wrap(my_fn, method="lm")))
g
?qplot
?boxplot
boxplot(mpg ~ am, data = mtcars)
ggplot(mtcars, aes(x=am, y=am)) + geom_boxplot()
ggplot(mtcars, aes(x=am, y=mpg)) + geom_boxplot()
fit <- lm(mpg ~ am, data = mtcars)
plot(fit)
ggplot(mtcars, aes(x=am, y=mpg)) + geom_boxplot()
par(mfrow=c(2, 2))
plot(fit)
t.test(fit)
t.test( mpg ~ am, data = mtcars)
?mtcars
mtcars <- mutate(mtcars, cyl = factor(cyl),
am = factor(am, c("automatic", "manual")))
t.test( mpg ~ am, data = mtcars)
str(mtcars)
mtcars <- mutate(mtcars, cyl = factor(cyl),
am = factor(am, labels = c("automatic", "manual")))
mtcars <- mutate(mtcars, cyl = factor(cyl),
am = factor(am))
str(mtcars)
data("mtcars")
mtcars <- mutate(mtcars, cyl = factor(cyl),
am = factor(am, labels = c("automatic", "manual")))
t.test( mpg ~ am, data = mtcars)
ggplot(mtcars, aes(x=am, y=mpg)) + geom_boxplot()
?mtcars
data("mtcars")
str(mtcars)
mtcars <- mutate(mtcars,
cyl = factor(cyl),
vs = factor(vs),
am = factor(am, labels = c("automatic", "manual")),
gear = factor(gear),
carb = factor(carb)
)
str(mtcars)
g = ggpairs(mtcars, lower = list(continuous = wrap(my_fn, method="lm")))
g
coef(summary(fit))
?mtcars
str(mtcars)
?mtcars
g <- ggplot(mtcars, aes(x=am, y=mpg)) + geom_boxplot()
g <- g + xlab("% in Agriculture") + ylab("Fertility")
g
g <- ggplot(mtcars, aes(x=am, y=mpg), colour = am)
g <- g + geom_boxplot()
g <- g + xlab("% in Agriculture") + ylab("Fertility")
g
g <- ggplot(mtcars, aes(x=am, y=mpg))
g <- g + geom_boxplot()
g <- g + xlab("Transmission") + ylab("Performance [Miles/Gallon]")
g
?mtcars
model1 <- lm(mpg ~ am, data = mtcars)
summary(model1)
summary(lm(mpg ~ ., data = mtcars))
model1 <- lm(mpg ~ am, data = mtcars)
summary(model1)
g = ggpairs(swiss, lower = list(continuous = wrap(my_fn, method="lm")))
g
?mtcars
model1 <- lm(mpg ~ am, data = mtcars)
model2 <- lm(mpg ~ am + cyl, data = mtcars)
model3 <- lm(mpg ~ am + disp, data = mtcars)
model4 <- lm(mpg ~ am + hp, data = mtcars)
model5 <- lm(mpg ~ am + drat, data = mtcars)
anova(model1, model2, model3, model4, model5)
model1 <- lm(mpg ~ am, data = mtcars)
model2 <- lm(mpg ~ am + cyl, data = mtcars)
model3 <- lm(mpg ~ am + disp, data = mtcars)
model4 <- lm(mpg ~ am + hp, data = mtcars)
model5 <- lm(mpg ~ am + drat, data = mtcars)
anova(model1, model3)
model1 <- lm(mpg ~ am, data = mtcars)
model2 <- lm(mpg ~ am + cyl, data = mtcars)
model3 <- lm(mpg ~ am + disp, data = mtcars)
model4 <- lm(mpg ~ am + hp, data = mtcars)
model5 <- lm(mpg ~ am + drat, data = mtcars)
anova(model1, model4)
anova(model1, model5)
anova(model1, model2)
model1 <- lm(mpg ~ am, data = mtcars)
model2 <- lm(mpg ~ am + cyl, data = mtcars)
model3 <- lm(mpg ~ am + disp, data = mtcars)
model4 <- lm(mpg ~ am + hp, data = mtcars)
model5 <- lm(mpg ~ am + drat, data = mtcars)
model6 <- lm(mpg ~ am + wt, data = mtcars)
model7 <- lm(mpg ~ am + qsec, data = mtcars)
model8 <- lm(mpg ~ am + vs, data = mtcars)
model9 <- lm(mpg ~ am + gear, data = mtcars)
model10 <- lm(mpg ~ am + gear, data = mtcars)
anova(model1, model2)
anova(model1, model3)
anova(model1, model4)
anova(model1, model5)
anova(model1, model6)
anova(model1, model7)
anova(model1, model8)
anova(model1, model9)
anova(model1, model10)
model11 <- lm(mpg ~ am + cyl + disp + hp + wt + qsec + vs, data = mtcars)
anova(model1, model11)
model10 <- lm(mpg ~ am + carb, data = mtcars)
anova(model1, model10)
