access_secret)
consumer_key <- 'pb0oyPmCpcQqAeaYe8aEXC0Mx'
consumer_secret <- 'Y02xtokn8ncpG4XfbSD7MH4lyqlWXY0iUKnF8NNdZ2BTq8lQ6K'
access_token <- '1888676370-GOsN7ny4FqoGdit6Y4gGN3kdtJJr0uCyMY3RpkT'
access_secret <- 'B1lpwy1gmTwD9haGqJUOQEILZp3BcVJjojYHNhrZi5a1n'
setup_twitter_oauth( consumer_key,
consumer_secret,
access_token,
access_secret)
consumer_key <- 'pb0oyPmCpcQqAeaYe8aEXC0Mx'
consumer_secret <- 'Y02xtokn8ncpG4XfbSD7MH4lyqlWXY0iUKnF8NNdZ2BTq8lQ6K'
access_token <- '1888676370-GOsN7ny4FqoGdit6Y4gGN3kdtJJr0uCyMY3RpkT'
access_secret <- 'B1lpwy1gmTwD9haGqJUOQEILZp3BcVJjojYHNhrZi5a1n'
setup_twitter_oauth( consumer_key,
consumer_secret,
NULL,
NULL)
consumer_key <- 'pb0oyPmCpcQqAeaYe8aEXC0Mx'
consumer_secret <- 'Y02xtokn8ncpG4XfbSD7MH4lyqlWXY0iUKnF8NNdZ2BTq8lQ6K'
access_token <- '1888676370-GOsN7ny4FqoGdit6Y4gGN3kdtJJr0uCyMY3RpkT'
access_secret <- 'B1lpwy1gmTwD9haGqJUOQEILZp3BcVJjojYHNhrZi5a1n'
setup_twitter_oauth( consumer_key,
consumer_secret,
NULL,
NULL)
consumer_key <- 'pb0oyPmCpcQqAeaYe8aEXC0Mx'
consumer_secret <- 'Y02xtokn8ncpG4XfbSD7MH4lyqlWXY0iUKnF8NNdZ2BTq8lQ6K'
access_token <- '1888676370-GOsN7ny4FqoGdit6Y4gGN3kdtJJr0uCyMY3RpkT'
access_secret <- 'B1lpwy1gmTwD9haGqJUOQEILZp3BcVJjojYHNhrZi5a1n'
setup_twitter_oauth( consumer_key,
consumer_secret,
NULL,
NULL)
consumer_key <- 'pb0oyPmCpcQqAeaYe8aEXC0Mx'
consumer_secret <- 'Y02xtokn8ncpG4XfbSD7MH4lyqlWXY0iUKnF8NNdZ2BTq8lQ6K'
access_token <- '1888676370-GOsN7ny4FqoGdit6Y4gGN3kdtJJr0uCyMY3RpkT'
access_secret <- 'B1lpwy1gmTwD9haGqJUOQEILZp3BcVJjojYHNhrZi5a1n'
setup_twitter_oauth( consumer_key,
consumer_secret,
access_token,
access_secret)
r_stats <- searchTwitter("bihar", n = 150, lang="en", since="2014-08-20")
length(r_stats)
zika_data <- searchTwitter("zika", since="2014-01-01", n = 10000,
geocode='-10.012130, -52.207031,2200km')
zika_data <- searchTwitter("zika", since = "2014-01-01", until = "2015-01-01",
n = 10000,geocode = '-10.012130,-52.207031,2200km')
searchTwitter('apartment hunting', geocode='40.7361,-73.9901,5mi',  n=5000, retryOnRateLimit=1)
zika_data <- searchTwitter("zika", since = "2014-01-01", until = "2015-01-01",
n = 10000,geocode = '-10.012130,-52.207031,2200km',
retryOnRateLimit = 1)
length(zika_data)
zika_data <- searchTwitter("sismo", since = "2014-01-01", until = "2016-01-01",
n = 10000,
retryOnRateLimit = 1)
zika_data <- searchTwitter("#sismo", since = "2014-01-01", until = "2016-01-01",
n = 10000,
retryOnRateLimit = 1)
zika_data <- searchTwitter("#sismo", n=10)
zika_data <- searchTwitter("sismo", n=10)
length(zika_data)
zika_data
install.packages("streamR", "RCurl", "ROAuth", "RJSONIO")
library(streamR)
library(RCurl)
library(RJSONIO)
library(stringr)
requestURL <- "https://api.twitter.com/oauth/request_token"
accessURL <- "https://api.twitter.com/oauth/access_token"
authURL <- "https://api.twitter.com/oauth/authorize"
consumer_key <- 'pb0oyPmCpcQqAeaYe8aEXC0Mx'
consumer_secret <- 'Y02xtokn8ncpG4XfbSD7MH4lyqlWXY0iUKnF8NNdZ2BTq8lQ6K'
# access_token <- '1888676370-GOsN7ny4FqoGdit6Y4gGN3kdtJJr0uCyMY3RpkT'
# access_secret <- 'B1lpwy1gmTwD9haGqJUOQEILZp3BcVJjojYHNhrZi5a1n'
my_oauth <- OAuthFactory$new(consumerKey = consumerKey,
consumerSecret = consumerSecret,
requestURL = requestURL,
accessURL = accessURL,
authURL = authURL)
my_oauth$handshake(cainfo = system.file("CurlSSL", "cacert.pem", package = "RCurl"))
library(streamR)
library(RCurl)
library(RJSONIO)
library(stringr)
requestURL <- "https://api.twitter.com/oauth/request_token"
accessURL <- "https://api.twitter.com/oauth/access_token"
authURL <- "https://api.twitter.com/oauth/authorize"
consumer_key <- 'pb0oyPmCpcQqAeaYe8aEXC0Mx'
consumer_secret <- 'Y02xtokn8ncpG4XfbSD7MH4lyqlWXY0iUKnF8NNdZ2BTq8lQ6K'
# access_token <- '1888676370-GOsN7ny4FqoGdit6Y4gGN3kdtJJr0uCyMY3RpkT'
# access_secret <- 'B1lpwy1gmTwD9haGqJUOQEILZp3BcVJjojYHNhrZi5a1n'
my_oauth <- OAuthFactory$new(consumerKey = consumerKey,
consumerSecret = consumerSecret,
requestURL = requestURL,
accessURL = accessURL,
authURL = authURL)
my_oauth$handshake(cainfo = system.file("CurlSSL", "cacert.pem", package = "RCurl"))
requestURL <- "https://api.twitter.com/oauth/request_token"
accessURL <- "https://api.twitter.com/oauth/access_token"
authURL <- "https://api.twitter.com/oauth/authorize"
consumerKey <- 'pb0oyPmCpcQqAeaYe8aEXC0Mx'
consumerSecret <- 'Y02xtokn8ncpG4XfbSD7MH4lyqlWXY0iUKnF8NNdZ2BTq8lQ6K'
# access_token <- '1888676370-GOsN7ny4FqoGdit6Y4gGN3kdtJJr0uCyMY3RpkT'
# access_secret <- 'B1lpwy1gmTwD9haGqJUOQEILZp3BcVJjojYHNhrZi5a1n'
my_oauth <- OAuthFactory$new(consumerKey = consumerKey,
consumerSecret = consumerSecret,
requestURL = requestURL,
accessURL = accessURL,
authURL = authURL)
my_oauth$handshake(cainfo = system.file("CurlSSL", "cacert.pem", package = "RCurl"))
library(twitteR)
requestURL <- "https://api.twitter.com/oauth/request_token"
accessURL <- "https://api.twitter.com/oauth/access_token"
authURL <- "https://api.twitter.com/oauth/authorize"
consumerKey <- 'pb0oyPmCpcQqAeaYe8aEXC0Mx'
consumerSecret <- 'Y02xtokn8ncpG4XfbSD7MH4lyqlWXY0iUKnF8NNdZ2BTq8lQ6K'
# access_token <- '1888676370-GOsN7ny4FqoGdit6Y4gGN3kdtJJr0uCyMY3RpkT'
# access_secret <- 'B1lpwy1gmTwD9haGqJUOQEILZp3BcVJjojYHNhrZi5a1n'
my_oauth <- OAuthFactory$new(consumerKey = consumerKey,
consumerSecret = consumerSecret,
requestURL = requestURL,
accessURL = accessURL,
authURL = authURL)
my_oauth$handshake(cainfo = system.file("CurlSSL", "cacert.pem", package = "RCurl"))
source("zika_getting_data.R")
twitterAuthentication()
save(my_oauth, file = "my_oauth.Rdata")
library(ROAuth)
requestURL <- "https://api.twitter.com/oauth/request_token"
accessURL <- "https://api.twitter.com/oauth/access_token"
authURL <- "https://api.twitter.com/oauth/authorize"
consumerKey <- "pb0oyPmCpcQqAeaYe8aEXC0Mx"
consumerSecret <- "Y02xtokn8ncpG4XfbSD7MH4lyqlWXY0iUKnF8NNdZ2BTq8lQ6K"
my_oauth <- OAuthFactory$new(consumerKey = consumerKey,
consumerSecret = consumerSecret,
requestURL = requestURL,
accessURL = accessURL,
authURL = authURL)
my_oauth$handshake(cainfo = system.file("CurlSSL", "cacert.pem",
package = "RCurl"))
save(my_oauth, file = "my_oauth.Rdata")
library(streamR)
load("my_oauth.Rdata")
filterStream(file.name = "tweets.json",
track = c("zika"),
tweets = 100,
location = c(3.294082, -73.300781, -33.614619, -29.707031),
timeout = 60,
oauth = my_oauth)
library(streamR)
load("my_oauth.Rdata")
filterStream(file.name = "tweets.json",
track = c("zika"),
tweets = 100,
location = c(3.294082, -73.300781, -33.614619, -29.707031),
timeout = 60,
oauth = my_oauth)
filterStream(file.name = "tweets.json",
track = c("zika"),
tweets = 100, #long,lat
location = c( -73.300781, 3.294082, -29.707031, -33.614619),
timeout = 60,
oauth = my_oauth)
filterStream(file.name = "tweets.json",
track = c("zika"),
tweets = 100, #long,lat
location = c(-73.300781,3.294082,-29.707031,-33.614619),
timeout = 60,
oauth = my_oauth)
filterStream(file.name = "tweets.json",
track = c("zika"),
tweets = 100, #long,lat
location = c(-29.707031,-33.614619,-73.300781,3.294082),
timeout = 60,
oauth = my_oauth)
filterStream(file.name = "tweets.json",
track = c("zika"),
tweets = 100, #long,lat
location = c(-29.707031,-33.614619,-73.300781,3.294082),
timeout = 60,
oauth = my_oauth)
filterStream(file.name = "tweets.json",
track = c("zika"),
tweets = 100, #long,lat
location = c(-122.75,36.8,-121.75,37.8),
timeout = 60,
oauth = my_oauth)
filterStream(file.name = "tweets.json",
track = c("zika"),
tweets = 100, #long,lat
location = c(-29.707031,3.294082,-73.300781,-33.614619),
timeout = 60,
oauth = my_oauth)
filterStream(file.name = "tweets.json",
track = c("zika"),
tweets = 100, #long,lat
location = c(-73.300781,-33.614619,-29.707031,3.294082),
timeout = 60,
oauth = my_oauth)
filterStream(file.name = "tweets.json",
track = c("zika", "sika"),
tweets = 100, #long,lat
location = c(-73.300781,-33.614619,-29.707031,3.294082),
timeout = 60,
oauth = my_oauth)
filterStream(file.name = "tweets.json",
track = "zika",
tweets = 100, #long,lat
location = c(-73.300781,-33.614619,-29.707031,3.294082),
timeout = 60,
oauth = my_oauth)
filterStream(file.name = "tweets.json",
track = "zika",
tweets = 100, #long,lat
location = c(-73.300781,-33.614619,-29.707031,3.294082),
timeout = 60,
oauth = my_oauth)
setwd("~/Desktop/Regression-Models")
source("linear_least_squares.R")
source("linear_least_sqares.R")
newGraphic()
source("linear_least_squares.R")
newGraphic()
source("linear_regression_models.R")
function1()
library(UsingR)
data(diamond)
library(ggplot2)
fit <- lm(price ~ carat, data = diamond)
coef(fit)
fit2 <- lm(price ~ I(carat - mean(carat)), data = diamond)
coef(fit2)
fit3 <- lm(price ~ I(carat * 10), data = diamond)
coef(fit3)
residualsInXLine <- function(){}
library(UsingR)
data(diamond)
library(ggplot2)
diamond$e <- resid(lm(price ~ carat, data = diamond))
g = ggplot(diamond, aes(x = carat, y = e))
g = g + xlab("Mass (carats)")
g = g + ylab("Residual price (SIN $)")
g = g + geom_hline(yintercept = 0, size = 2)
g = g + geom_point(size = 7, colour = "black", alpha=0.5)
g = g + geom_point(size = 5, colour = "blue", alpha=0.2)
g
e = c(resid(lm(price ~ 1, data = diamond)),
resid(lm(price ~ carat, data = diamond)))
fit = factor(c(rep("Itc", nrow(diamond)),
rep("Itc, slope", nrow(diamond))))
g = ggplot(data.frame(e = e, fit = fit), aes(y = e, x = fit, fill = fit))
g = g + geom_dotplot(binaxis = "y", size = 2, stackdir = "center", binwidth = 20)
g = g + xlab("Fitting approach")
g = g + ylab("Residual price")
g
e = c(resid(lm(price ~ 1, data = diamond)),
resid(lm(price ~ carat, data = diamond)))
fit = factor(c(rep("Itc", nrow(diamond)),
rep("Itc, slope", nrow(diamond))))
g = ggplot(data.frame(e = e, fit = fit), aes(y = e, x = fit, fill = fit))
g = g + geom_dotplot(binaxis = "y", stackdir = "center", binwidth = 20)
g = g + xlab("Fitting approach")
g = g + ylab("Residual price")
g
x <- c(0.61, 0.93, 0.83, 0.35, 0.54, 0.16, 0.91, 0.62, 0.62)
y <- c(0.67, 0.84, 0.6, 0.18, 0.85, 0.47, 1.1, 0.65, 0.36)
fit <- lm(y ~ x)
fit
summary(fit)
data("mtcars")
data("mtcars")
fit <- lm(mpg ~ wt, data = mtcars)
x <- c(mean(mtcars$wt))
predict(fit, newdata = data.frame(wt = x))
predict(fit, newdata = data.frame(wt = x), interval = ("confidence"))
mtcars$hp
summary(mtcars)
mtcars -help
mtcars -h
summary(fit)
x
x <- c(3)
predict(fit, newdata = data.frame(wt = x), interval = ("prediction"))
data("mtcars")
fit <- lm(mpg ~ I(wt/2), data = mtcars)
summary(fit)$coefficients
sumCoeff <- summary(fit)$coefficients
sumCoef[1,1] + c(-1, 1) * qt(.975, df = fit$df) * sumCoef[1, 2]
sumCoef <- summary(fit)$coefficients
sumCoef[1,1] + c(-1, 1) * qt(.975, df = fit$df) * sumCoef[1, 2]
sumCoef[2,1] + c(-1, 1) * qt(.975, df = fit$df) * sumCoef[2, 2]
fit <- lm(mpg ~ wt, data = mtcars)
coef(fit)
fit
summary(fit)
source("multivariable2.R")
info()
quickCorrelations()
install.packages(GGally)
install.packages("GGally")
quickCorrelations()
help("wrap", package = "GGally")
source("multivariable2.R")
quickCorrelations()
summary(lm(Fertility ~ . , data = swiss))$coefficients
n <- 100; x2 <- 1 : n; x1 <- .01 * x2 + runif(n, -.1, .1); y = -x1 + x2 + rnorm(n, sd = .01)
summary(lm(y ~ x1))$coef
n <- 100; x2 <- 1 : n; x1 <- .01 * x2 + runif(n, -.1, .1); y = -x1 + x2 + rnorm(n, sd = .01)
summary(lm(y ~ .))$coef
source("multivariable2.R")
plotExample1(y, x1, x2)
source("multivariable2.R")
plotResidualsExample1(x2, ey, ex1)
source("multivariable2.R")
plotResidualsExample1(dat)
dat = data.frame(y = y, x1 = x1, x2 = x2, ey = resid(lm(y ~ x2)), ex1 = resid(lm(x1 ~ x2)))
plotResidualsExample1(dat)
source("multivariable2.R")
unnecesaryVariables()
source("multivariable2.R")
plotExample2()
summary(lm(count ~ spray, data = InsectSprays))$coef
summary(lm(count ~ spray - 1, data = InsectSprays))$coef
library(dplyr)
summarise(group_by(InsectSprays, spray), mn = mean(count))
source("multivariable3.R")
swiss = mutate(swiss, CatholicBin = 1 * (Catholic > 50))
plotBinaryData(swiss)
fit = lm(Fertility ~ Agriculture + factor(CatholicBin), data = swiss)
g1 = g
g1 = g1 + geom_abline(intercept = coef(fit)[1], slope = coef(fit)[2], size = 2)
g1 = g1 + geom_abline(intercept = coef(fit)[1] + coef(fit)[3], slope = coef(fit)[2], size = 2)
g1
g1 = g
g1 = g1 + geom_abline(intercept = coef(fit)[1], slope = coef(fit)[2], size = 2)
g1
g = ggplot(swiss, aes(x = Agriculture, y = Fertility, colour = factor(CatholicBin)))
g = g + geom_point(size = 6, colour = "black") + geom_point(size = 4)
g = g + xlab("% in Agriculture") + ylab("Fertility")
g
g1 = g
g1 = g1 + geom_abline(intercept = coef(fit)[1], slope = coef(fit)[2], size = 2)
g1
fit = lm(Fertility ~ Agriculture + factor(CatholicBin), data = swiss)
g1 = g
g1 = g1 + geom_abline(intercept = coef(fit)[1], slope = coef(fit)[2], size = 2)
g1 = g1 + geom_abline(intercept = coef(fit)[1] + coef(fit)[3], slope = coef(fit)[2], size = 2)
g1
summary(lm(Fertility ~ Agriculture + factor(CatholicBin), data = swiss))$coef
summary(lm(Fertility ~ Agriculture * factor(CatholicBin), data = swiss))$coef
fit = lm(Fertility ~ Agriculture * factor(CatholicBin), data = swiss)
g1 = g
g1 = g1 + geom_abline(intercept = coef(fit)[1], slope = coef(fit)[2], size = 2)
g1 = g1 + geom_abline(intercept = coef(fit)[1] + coef(fit)[3],
slope = coef(fit)[2] + coef(fit)[4], size = 2)
g1
summary(lm(Fertility ~ Agriculture + Agriculture : factor(CatholicBin), data = swiss))$coef
library(rgl)
install.packages("rgl")
library(rgl)
install.packages("rgl")
library(rgl)
library(rgl)
install.packages("rgl")
library(rgl)
system.file("libs/aglrgl.so", package="rgl")
unlink(system.file("libs/aglrgl.so", package="rgl"))
library(rgl)
system.file("libs/rgl.so", package="rgl")
unlink(system.file("libs/rgl.so", package="rgl"))
library(rgl)
install.packages("rgl")
library(rgl)
source("resideuals_multivariable.R")
source("residuals_multivariable.R")
linearModel()
source("residuals_multivariable.R")
leverageAndInfluence()
source("residuals_multivariable.R")
leverageAndInfluence()
?influence.measures
source("residuals_multivariable.R")
case1()
source("residuals_multivariable.R")
case1()
n <- 100
x <- c(10, rnorm(n))
y <- c(10, c(rnorm(n)))
fit <- lm(y ~ x)
round(dfbetas(fit)[1 : 10, 2], 3)
round(hatvalues(fit)[1 : 10], 3)
source("residuals_multivariable.R")
case2()
n <- 100
x <- rnorm(n)
y <- x + rnorm(n, sd = .3)
x <- c(5, x)
y <- c(5, y)
fit2 <- lm(y ~ x)
round(dfbetas(fit2)[1 : 10, 2], 3)
n <- 100
x <- rnorm(n)
y <- x + rnorm(n, sd = .3)
x <- c(5, x)
y <- c(5, y)
fit2 <- lm(y ~ x)
round(dfbetas(fit2)[1 : 10, 2], 3)
n <- 100
x <- rnorm(n)
y <- x + rnorm(n, sd = .3)
x <- c(5, x)
y <- c(5, y)
fit2 <- lm(y ~ x)
round(dfbetas(fit2)[1 : 10, 2], 3)
round(hatvalues(fit2)[1 : 10], 3)
source("residuals_multivariable.R")
finalExample()
dat <- read.table('http://www4.stat.ncsu.edu/~stefanski/NSF_Supported/Hidden_Images/orly_owl_files/orly_owl_Lin_4p_5_flat.txt', header = FALSE)
pairs(dat)
summary(lm(V1 ~ . -1, data = dat))$coef
fit <- lm(V1 ~ . - 1, data = dat)
plot(predict(fit), resid(fit), pch = '.')
source("model_selection.R")
nonDependenciesSD()
source("model_selection.R")
DependenciesDS()
source("model_selection.R")
varianceVFI()
install.packages(car)
install.packages("car")
varianceVFI()
install.packages("car")
source("model_selection.R")
nestedModel()
source("model_selection.R")
nestedModel()
source("model_selection.R")
nestedModel()
source("model_selection.R")
nestedModel()
fit1 <- lm(Fertility ~ Agriculture, data = swiss)
fit3 <- update(fit1, Fertility ~ Agriculture + Examination + Education)
fit5 <- update(fit3, Fertility ~ Agriculture + Examination + Education + Catholic + Infant.Mortality)
anova(fit1, fit3, fit5)
fit <- lm(Fertility ~ . , data = swiss)
fit1 <- lm(Fertility ~ Agriculture, data = swiss)
fit3 <- update(fit, Fertility ~ Agriculture + Examination + Education)
fit5 <- update(fit, Fertility ~ Agriculture + Examination + Education + Catholic + Infant.Mortality)
anova(fit1, fit3, fit5)
data("mtcars")
fit <- lm(mpg ~ cyl + wt, data = mtcars)
predict(fit, 8)
?mtcars
summary(fit)
fit$coefficients[2][1]
fit$coefficients[2][1]*2
summary(mtcars)
str(mtcars)
fit <- lm(mpg ~ I(factor(cyl)) + wt, data = mtcars)
fit$coefficients
summary(fit)
source("quiz3.R")
question1()
fit2 <- lm(mpg ~ I(factor(cyl)), data = mtcars)
fit2$coefficients[3]
summary(fit)
summary(fit2)
fit <- lm(mpg ~ I(factor(cyl)) * wt, data = mtcars)
summary(fit)
fit1 <- lm(mpg ~ I(factor(cyl)) + wt, data = mtcars)
fit2 <- lm(mpg ~ I(factor(cyl)) * wt, data = mtcars)
anova(fit1, fit2)
source("quiz3.R")
source("quiz3.R")
question3()
fit <- lm(mpg ~ I(wt * 0.5) + factor(cyl), data = mtcars)
summary(fit)
fit <- lm(mpg ~ I(factor(cyl)) + wt, data = mtcars)
summary(fit)
?mtcars
x <- c(0.586, 0.166, -0.042, -0.614, 11.72)
y <- c(0.549, -0.026, -0.127, -0.751, 1.344)
x <- c(0.586, 0.166, -0.042, -0.614, 11.72)
y <- c(0.549, -0.026, -0.127, -0.751, 1.344)
fit <- lm(y ~ x)
round(hatvalues(fit)[1 : 10], 3)
x <- c(0.586, 0.166, -0.042, -0.614, 11.72)
y <- c(0.549, -0.026, -0.127, -0.751, 1.344)
fit <- lm(y ~ x)
round(hatvalues(fit)[1 : 5], 3)
x <- c(0.586, 0.166, -0.042, -0.614, 11.72)
y <- c(0.549, -0.026, -0.127, -0.751, 1.344)
fit <- lm(y ~ x)
# First look for high hatvalue
round(hatvalues(fit)[1 : 5], 4)
round(dfbetas(fit)[1 : 5, 2], 3)
source("logistic_regression.R")
example1()
source("logistic_regression.R")
example1()
source("logistic_regression.R")
example1()
source("logistic_regression.R")
logistic_regression_ravens()
source("logistic_regression.R")
logistic_regression_ravens()
source("logistic_regression.R")
logistic_regression_ravens()
source("logistic_regression.R")
logistic_regression_ravens()
source("logistic_regression.R")
logistic_regression_ravens()
